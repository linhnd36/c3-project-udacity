version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      description:
        type: string
        description: the environment stack to destroy
      stack-name:
        type: string
        description: Name of the stack to destroy
    steps:
      - run:
          name: Destroy << parameters.description >> environments
          when: on_fail
          command: |
            if [[ << parameters.description >> == *"frontend"* ]];
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>
       
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend-test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend-test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: frontend-scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend-scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [deploy-infrastructure]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query 'Stacks[0].Outputs[?OutputKey==`BackendIP`].OutputValue' \
             --output text >> /root/project/.circleci/ansible/inventory.txt
            mkdir -m 777 -p /tmp/workspace && cp /root/project/.circleci/ansible/inventory.txt /tmp/workspace
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: /tmp
          paths:
            - workspace
      - run:
          name: checking persist
          command: |
            ls -la /tmp/workspace/inventory.txt
            cat /tmp/workspace/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          description: backend
          stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          description: frontend
          stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: "amazon/aws-cli:latest"
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [configure-infrastructure]
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints:
            - "ef:83:c0:8f:8e:b2:51:ce:b2:f9:f8:b7:b2:c2:8d:e2"
      - run:
          name: Install dependencies
          command: |
            # Your code here
            yum install -y wget
            wget http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm
            rpm -ivh epel-release-7-14.noarch.rpm
            yum clean expire-cache
            yum install -y ansible python3 tar gzip
            # python3 -m pip -V
            # curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            # python3 get-pip.py --user
            # python3 -m pip install ansible
      # attach workspace
      - attach_workspace:
          at: /tmp
      - run:
          name: Configure server
          command: |
            # Your code here
            ls -la /tmp && ls -la /tmp/workspace && ls -la /tmp/workspace/inventory.txt \
            && cp /tmp/workspace/inventory.txt .circleci/ansible/ \
            && cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            /usr/bin/ansible-playbook -i inventory.txt configure-server.yml
  #     # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     description: backend
      #     stack-name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      # - destroy-environment:
      #     description: frontend
      #     stack-name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]      
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]   
      - configure-infrastructure:
          requires: [deploy-infrastructure]
